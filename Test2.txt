#include <iostream>
#include <vector>
#include <map>
#include <cmath>
#include <string>

using namespace std;

// Function to decode values from different bases
long long decodeValue(const string &value, int base) {
    long long decodedValue = 0;
    int length = value.length();
    for (int i = 0; i < length; i++) {
        char digit = value[length - i - 1];
        int digitValue;
        if (digit >= '0' && digit <= '9') {
            digitValue = digit - '0';
        } else if (digit >= 'A' && digit <= 'Z') {
            digitValue = digit - 'A' + 10;
        }
        decodedValue += digitValue * pow(base, i);
    }
    return decodedValue;
}

// Lagrange interpolation to find the constant term c (i.e., f(0))
double lagrangeInterpolation(const vector<pair<int, long long>> &points) {
    int k = points.size();
    double constantTerm = 0.0;

    // Lagrange interpolation formula to find f(0)
    for (int i = 0; i < k; i++) {
        double term = points[i].second; // y_i
        for (int j = 0; j < k; j++) {
            if (i != j) {
                term *= (0 - points[j].first) * 1.0 / (points[i].first - points[j].first);
            }
        }
        constantTerm += term;
    }
    return constantTerm;
}

int main() {
    // Variables to hold n and k
    int n = 9, k = 6; // from the input JSON

    // Map to store the input values for each point
    map<int, pair<int, string>> input = {
        {1, {10, "28735619723837"}},
        {2, {16, "1A228867F0CA"}},
        {3, {12, "32811A4AA0B7B"}},
        {4, {11, "917978721331A"}},
        {5, {16, "1A22886782E1"}},
        {6, {10, "28735619654702"}},
        {7, {14, "71AB5070CC4B"}},
        {8, {9, "122662581541670"}},
        {9, {8, "642121030037605"}}
    };

    // Decoding the y-values and preparing points (x, y)
    vector<pair<int, long long>> points;
    for (const auto &item : input) {
        int x = item.first;
        int base = item.second.first;
        string value = item.second.second;
        long long y = decodeValue(value, base);
        points.push_back({x, y});
    }

    // Use Lagrange interpolation to find the constant term (c) with the first 6 points
    vector<pair<int, long long>> firstKPoints(points.begin(), points.begin() + k);
    double constantTerm = lagrangeInterpolation(firstKPoints);

    // Output the constant term
    cout << "The constant term (c) is: " << constantTerm << endl;

    return 0;
}
